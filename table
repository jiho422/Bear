package com.thread.synchron;

import java.util.ArrayList;

public class Table {
	String[] dishNames = {"donut", "donut", "burger"};
	final int MAX_FOOD = 6;	// 테이블에 놓을 수 있는 최대 음식의 갯수
	
	private ArrayList<String> dishes = new ArrayList<>(); // 6개의 음식을 담을 수 있는, 6개의 접시
	
	public synchronized void add(String dish) {
		// 테이블에 음식이 가득찼으면, 테이블에 음식을 추가하지 않는다.
//		if(dishes.size() >= MAX_FOOD) {		// dishes.size() 가(6 이지만) 인덱스 0~5 이기 때문에 MAX_FOOD (6) 보다 크거나 같으면 반환한다.
//			return;
//		}
//		
//		dishes.add(dish);
//		System.out.println("Dishes : "+dishes.toString());
//	}
	
		while(dishes.size() >= MAX_FOOD) {
			String name = Thread.currentThread().getName();
			System.out.println(name + " is waiting");
			
			try {
				wait();
				Thread.sleep(500);
			}catch(InterruptedException e) {
				
			}
		}
		
		dishes.add(dish);
		
		notify();
		System.out.println("Dishes : "+ dishes.toString());
	}
		
	public /* boolean */ void remove(String dishName) {
		// 지정된 요리와 일치하는 요리를 테이블에서 제거한다.
		synchronized(this) {
			String name = Thread.currentThread().getName();
			while(dishes.size() == 0) {
				
				System.out.println(name + " is Waiting");
				try {
					wait();
					Thread.sleep(500);
				}catch(InterruptedException e) {
					
				}
			}
			while(true) {
				for(int i=0;i<dishes.size();i++) {
					if(dishName.equals(dishes.get(i))) {
						dishes.remove(i);
						notify();
						return;
					}
					
				}
				try {
					System.out.println(name + " is Waiting");
					wait();
					Thread.sleep(500);
				}catch(InterruptedException e) {
					
				}
			}
			
//			for(int i=0; i<dishes.size();i++) {
//				if(dishName.equals(dishes.get(i))){
//					dishes.remove(i);
//					return true;
//				}	
//			}
		}
//		return false;
	}
	
	public int dishNum() {
		return dishNames.length;
	}
}
